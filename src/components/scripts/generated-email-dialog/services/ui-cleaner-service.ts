
import { supabase } from '@/integrations/supabase/client';

/**
 * System prompt for the UI Cleaner AI
 */
const UI_CLEANER_PROMPT = `Jesteś zaawansowanym copywriterem odpowiedzialnym za edytowanie gotowych maili marketingowych w języku polskim. Twoim zadaniem nie jest zmiana treści, ale poprawa jej formy i czytelności.

Zasady edycji, które muszą zostać ściśle przestrzegane:

Rozbijaj długie akapity, tak aby każdy akapit zawierał tylko jedno zdanie.

Zachowuj pustą linijkę między akapitami, aby ułatwić czytanie.

Usuń wszystkie myślniki oraz wszelkie formy mianowników lub list. Zamiast nich twórz pełne zdania.

Skup się tylko na formie tekstu, nie zmieniaj jego sensu ani tonacji.

Nie dodawaj nowych treści ani nie skracaj istniejących.

Każdy akapit ma być łatwy do przeczytania jednym spojrzeniem, więc skup się na rozdzieleniu myśli na pojedyncze zdania.

Te zasady muszą być spełnione w 100%, nie są opcjonalne.

Treść, którą otrzymasz, będzie gotowym mailem marketingowym.`;

/**
 * Cleans and formats text for display purposes
 * 
 * @param text The text to be cleaned and formatted
 * @returns Cleaned and formatted text
 */
export function cleanTextForDisplay(text: string): string {
  if (!text) return '';
  
  // Remove any excessive whitespace
  return text.trim()
    // Replace multiple spaces with a single space
    .replace(/\s+/g, ' ')
    // Ensure proper punctuation spacing
    .replace(/\s+([.,;:!?])/g, '$1')
    // Capitalize the first letter of sentences
    .replace(/(^\w|\.\s+\w)/g, match => match.toUpperCase());
}

/**
 * Sends the generated email content through the UI Cleaner AI
 * to improve formatting and readability for the UI display
 * 
 * @param emailContent The raw email content generated by PAS or CJN agent
 * @returns Cleaned and formatted email content ready for UI display
 */
export async function cleanEmailContentForUI(emailContent: string): Promise<string> {
  try {
    console.log('Starting UI cleaning process for email content');
    
    // If there's no content or it's too short, return it as is
    if (!emailContent || emailContent.length < 50) {
      console.log('Email content too short, skipping UI cleaning');
      return emailContent;
    }
    
    // Create the request body for the UI Cleaner AI
    const requestBody = {
      prompt: UI_CLEANER_PROMPT,
      emailContent: emailContent,
      _timestamp: Date.now(), // Add timestamp to prevent caching
      _nonce: Math.random().toString(36).substring(2, 15) // Add random nonce
    };
    
    console.log('Sending content to UI Cleaner with length:', emailContent.length);
    
    // Call the UI Cleaner edge function
    const { data, error } = await supabase.functions.invoke('ui-cleaner', {
      body: requestBody,
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
        'X-No-Cache': Date.now().toString()
      }
    });
    
    // Handle errors from the edge function
    if (error) {
      console.error('Error invoking UI Cleaner:', error.message);
      // If there's an error, return the original content
      return emailContent;
    }
    
    // Ensure we have cleaned content in the response
    if (!data.cleanedContent) {
      console.warn('UI Cleaner did not return cleaned content, using original');
      return emailContent;
    }
    
    console.log('UI cleaning completed successfully');
    
    return data.cleanedContent;
  } catch (err: any) {
    console.error('Failed to clean email content for UI:', err);
    // In case of error, return the original content
    return emailContent;
  }
}

/**
 * Applies UI cleaning directly from the generate-email-content function response
 * if the cleaning was already done in the edge function
 * 
 * @param rawContent The original raw content 
 * @param cleanedContent The already cleaned content from the edge function
 * @returns The best available content, preferring cleaned if available
 */
export function applyEdgeFunctionCleaning(rawContent: string, cleanedContent?: string): string {
  if (!cleanedContent || cleanedContent.length < 50) {
    console.log('No pre-cleaned content available, using raw content');
    return cleanTextForDisplay(rawContent);
  }
  
  console.log('Using pre-cleaned content from edge function');
  return cleanTextForDisplay(cleanedContent);
}
